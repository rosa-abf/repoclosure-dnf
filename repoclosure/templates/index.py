#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode
from .layout import layout

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '3.2.6'
__CHEETAH_versionTuple__ = (3, 2, 6, 'final', 0)
__CHEETAH_genTime__ = 1604771379.9022167
__CHEETAH_genTimestamp__ = 'Sat Nov  7 17:49:39 2020'
__CHEETAH_src__ = 'index.tmpl'
__CHEETAH_srcLastModified__ = 'Sat Nov  7 17:49:37 2020'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class index(layout):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(index, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainContent(self, **KWS):



        ## CHEETAH: generated from #def mainContent() at line 3, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        for platform in VFFSL(SL,"platforms",True): # generated from line 4, col 3
            counter = VFFSL(SL,"counters",True)[VFFSL(SL,"platform",True)]
            write('''    <div class="row">
''')
            for type in VFFSL(SL,"counter.types",True): # generated from line 7, col 7
                write('''        <div class="col">
          <h4>''')
                _v = VFFSL(SL,"platform",True) # '$platform' on line 9, col 15
                if _v is not None: write(_filter(_v, rawExpr='$platform')) # from line 9, col 15.
                write('''-''')
                _v = VFFSL(SL,"type",True) # '$type' on line 9, col 25
                if _v is not None: write(_filter(_v, rawExpr='$type')) # from line 9, col 25.
                write('''</h4>
          <table class="table table-sm table-bordered">
            <tr>
              <th></th>
''')
                for repository in VFFSL(SL,"counter.repositories",True): # generated from line 13, col 15
                    write('''                <td>''')
                    _v = VFFSL(SL,"repository",True) # '$repository' on line 14, col 21
                    if _v is not None: write(_filter(_v, rawExpr='$repository')) # from line 14, col 21.
                    write('''</td>
''')
                write('''            </tr>
''')
                for arch in VFFSL(SL,"counter.arches",True): # generated from line 17, col 13
                    write('''              <tr>
                <td>''')
                    _v = VFFSL(SL,"arch",True) # '$arch' on line 19, col 21
                    if _v is not None: write(_filter(_v, rawExpr='$arch')) # from line 19, col 21.
                    write('''</td>
''')
                    for repository in VFFSL(SL,"counter.repositories",True): # generated from line 20, col 17
                        key = "%s#%s#%s" % (VFFSL(SL,"type",True), VFFSL(SL,"repository",True), VFFSL(SL,"arch",True))
                        count = VFN(VFFSL(SL,"counter",True),"counts",True)[VFFSL(SL,"key",True)]
                        if VFFSL(SL,"count",True) == 0: # generated from line 23, col 19
                            write('''                    <td>''')
                            _v = VFFSL(SL,"count",True) # '$count' on line 24, col 25
                            if _v is not None: write(_filter(_v, rawExpr='$count')) # from line 24, col 25.
                            write('''</td>
''')
                        elif VFFSL(SL,"count",True) > 0 or VFFSL(SL,"count",True) == -1: # generated from line 25, col 19
                            link = "%s-%s-%s_%s.html" % (VFFSL(SL,"platform",True), VFFSL(SL,"arch",True), VFFSL(SL,"repository",True), VFFSL(SL,"type",True))
                            if VFFSL(SL,"count",True) == -1: # generated from line 27, col 21
                                write('''                      <td><a href="''')
                                _v = VFFSL(SL,"link",True) # '$link' on line 28, col 36
                                if _v is not None: write(_filter(_v, rawExpr='$link')) # from line 28, col 36.
                                write('''">Error</a></td>
''')
                            else: # generated from line 29, col 21
                                write('''                      <td><a href="''')
                                _v = VFFSL(SL,"link",True) # '$link' on line 30, col 36
                                if _v is not None: write(_filter(_v, rawExpr='$link')) # from line 30, col 36.
                                write('''">''')
                                _v = VFFSL(SL,"count",True) # '$count' on line 30, col 43
                                if _v is not None: write(_filter(_v, rawExpr='$count')) # from line 30, col 43.
                                write('''</a></td>
''')
                    write('''              </tr>
''')
                write('''          </table>
        </div>
''')
            write('''    </div>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def rightTitle(self, **KWS):



        ## CHEETAH: generated from #def rightTitle() at line 42, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''  <h5>Generated on ''')
        _v = VFFSL(SL,"generated_on",True) # '$generated_on' on line 43, col 20
        if _v is not None: write(_filter(_v, rawExpr='$generated_on')) # from line 43, col 20.
        write(''' in ''')
        _v = VFFSL(SL,"generated_in",True) # '$generated_in' on line 43, col 37
        if _v is not None: write(_filter(_v, rawExpr='$generated_in')) # from line 43, col 37.
        write('''</h5>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_index = 'writeBody'

## END CLASS DEFINITION

if not hasattr(index, '_initCheetahAttributes'):
    templateAPIClass = getattr(index,
                               '_CHEETAH_templateClass',
                               Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(index)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit https://cheetahtemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=index()).run()


